//==============================================================================
// Dragon Engine (D$E) Ring Menu
// D$E_RingMenu.js
// Version 1.3.0
//==============================================================================
/*
 * Copyright 2015 Ramiro Rojo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *    http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*:
 *@plugindesc Allows to easy translate all of your text from the game on a nice
 * format to read and write.
 *
 */
// this section is auto generated
var I18n = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(g) { return formatGroups(g); },
        peg$c1 = "#",
        peg$c2 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c3 = { type: "any", description: "any character" },
        peg$c4 = "\n",
        peg$c5 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c6 = "\r",
        peg$c7 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c8 = ":",
        peg$c9 = { type: "literal", value: ":", description: "\":\"" },
        peg$c10 = function(k, v) { return { key: k, value: v, line: 0, col: 0 }; },
        peg$c11 = /^[A-Za-z0-9_\-]/,
        peg$c12 = { type: "class", value: "[A-Za-z0-9_-]", description: "[A-Za-z0-9_-]" },
        peg$c13 = function(r) { return r.join(''); },
        peg$c14 = "\"",
        peg$c15 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c16 = function(s) { return s.join(''); },
        peg$c17 = function(c) { return c; },
        peg$c18 = function(r) { return r; },
        peg$c19 = function(f, r) { return [f].concat(r); },
        peg$c20 = function(p) { return p; },
        peg$c21 = function(f, r) { console.log(INDENT.concat([])); return [f].concat(r).join('\n'); },
        peg$c22 = function(s) { return s; },
        peg$c23 = "&newline;",
        peg$c24 = { type: "literal", value: "&newline;", description: "\"&newline;\"" },
        peg$c25 = function() { return '\n'; },
        peg$c26 = "&return;",
        peg$c27 = { type: "literal", value: "&return;", description: "\"&return;\"" },
        peg$c28 = function() { return '\r'; },
        peg$c29 = "&tab;",
        peg$c30 = { type: "literal", value: "&tab;", description: "\"&tab;\"" },
        peg$c31 = function() { return '\t'; },
        peg$c32 = "&form;",
        peg$c33 = { type: "literal", value: "&form;", description: "\"&form;\"" },
        peg$c34 = function() { return '\f'; },
        peg$c35 = "&vtab;",
        peg$c36 = { type: "literal", value: "&vtab;", description: "\"&vtab;\"" },
        peg$c37 = function() { return '\v'; },
        peg$c38 = "&amp;",
        peg$c39 = { type: "literal", value: "&amp;", description: "\"&amp;\"" },
        peg$c40 = function() { return '&'; },
        peg$c41 = "&quote;",
        peg$c42 = { type: "literal", value: "&quote;", description: "\"&quote;\"" },
        peg$c43 = function() { return '"'; },
        peg$c44 = "&space;",
        peg$c45 = { type: "literal", value: "&space;", description: "\"&space;\"" },
        peg$c46 = function() { return ' '; },
        peg$c47 = "&hash;",
        peg$c48 = { type: "literal", value: "&hash;", description: "\"&hash;\"" },
        peg$c49 = function() { return '#'; },
        peg$c50 = " ",
        peg$c51 = { type: "literal", value: " ", description: "\" \"" },
        peg$c52 = "\t",
        peg$c53 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c54 = function(s) { return s >= INDENT.top() },
        peg$c55 = function(s) { INDENT.push(s); },
        peg$c56 = function(s) { return s == INDENT.top(); },
        peg$c57 = "",
        peg$c58 = function() { INDENT.pop(); },
        peg$c59 = function(s) { return s.length; },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenewline();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsenewline();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekey_group();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsenewline();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsenewline();
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomment();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenewline() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseS();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseS();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomment();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseEOL();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseEOL();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c1;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseEOL();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseEOL();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c3); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c4;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c6;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
      }

      return s0;
    }

    function peg$parsekey_pair() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekey();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c8;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsevalue();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c10(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekey() {
      var s0;

      s0 = peg$parsealphanumeric_key();
      if (s0 === peg$FAILED) {
        s0 = peg$parsequoted_string();
      }

      return s0;
    }

    function peg$parsealphanumeric_key() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c11.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c11.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsequoted_string() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestring_char();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsestring_char();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c14;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestring_char() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c14;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseEOL();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseescaped_character();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c17(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0;

      s0 = peg$parseindented_value();
      if (s0 === peg$FAILED) {
        s0 = peg$parseunquoted_string();
        if (s0 === peg$FAILED) {
          s0 = peg$parsequoted_string();
        }
      }

      return s0;
    }

    function peg$parseindented_value() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseindent();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseindented_value_content();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoutdent();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c18(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseindented_value_content() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekey_group();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseblock_string();
      }

      return s0;
    }

    function peg$parsekey_group() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekey_pair();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsekey_group_continuation();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsekey_group_continuation();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekey_group_continuation() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesamedent();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekey_pair();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunquoted_string() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseS();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseS();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseunquoted_char();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseunquoted_char();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseS();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseS();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunquoted_char() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEOL();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseescaped_character();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseblock_string() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseunquoted_string();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblock_string_continuation();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblock_string_continuation();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseblock_string_continuation() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesamedent();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseunquoted_string();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c22(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseescaped_character() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c23) {
        s1 = peg$c23;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c26) {
          s1 = peg$c26;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c29) {
            s1 = peg$c29;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c31();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c32) {
              s1 = peg$c32;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c34();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c35) {
                s1 = peg$c35;
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c36); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c37();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c38) {
                  s1 = peg$c38;
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c39); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c40();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 7) === peg$c41) {
                    s1 = peg$c41;
                    peg$currPos += 7;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c42); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c43();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c44) {
                      s1 = peg$c44;
                      peg$currPos += 7;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c45); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c46();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 6) === peg$c47) {
                        s1 = peg$c47;
                        peg$currPos += 6;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c48); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c49();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s0 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c3); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseS() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c50;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s0 = peg$c52;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
      }

      return s0;
    }

    function peg$parseindent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenewline();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsenewline();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecount_space();
        if (s2 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s3 = peg$c54(s2);
          if (s3) {
            s3 = void 0;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c55(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesamedent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenewline();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsenewline();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecount_space();
        if (s2 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s3 = peg$c56(s2);
          if (s3) {
            s3 = void 0;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseoutdent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$c57;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c58();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecount_space() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseS();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseS();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c59(s1);
      }
      s0 = s1;

      return s0;
    }



     var INDENT = [0];

     INDENT.top = function () {
      return this[this.length - 1];
     }

     function formatGroups(g) {

      var result = {};

      g.forEach(function (i) {
        if (result[i.key]) {
          throw "Line: " + i.line + ", Col: " + i.col + ". Repeated key: " + i.key;
        }
        result[i.key] = i.value;
      });
      return result;
     }




    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();

I18n._languages = []

// The rest of the library

Object.defineProperty(I18n, 'language', {
  get: function () {
    return this._language;
  },
  set: function (value) {
    if (value !== this._language) {
      this._loadLanguage(value);
    }
  }
});

I18n._loadLanguage = function (name) {
  if (this._languages[name]) {
    this._setupLanguage(name);
  }
  this._translating = true;
  var xhr = new XMLHttpRequest();
  var url = 'data/' + src;
  xhr.open('GET', 'data/i18n/' + name);
  xhr.onload = function() {
    this._translating = false;
    if (xhr.status < 400) {
      I18n._onLoad(name, I18n.parse(xhr.responseText));
    }
  };
}

I18n._onLoad = function (language, data) {
  this._languages[name] = data;
  this._setupLanguage(name);
}

I18n._setupLanguage = function (language) {
  this._language = language;

}

I18n._textFile = null;

I18n.dump = function () {
  var text = this._generateDumpText();
  var data = new Blob([text], {type: 'text/plain'});
  if (this._textFile !== null) {
    window.URL.revokeObjectURL(this._textFile);
  }
  this._textFile = window.URL.createObjectURL(data);
  this._download();
}

I18n._generateDumpText = function () {
  var data = this._readData();
  var result  = this._formatData(data);
  return result;
}

I18n._download = function () {
  var downloadLink = document.createElement("a");
  downloadLink.download = 'text.yaml';
  downloadLink.href = this._textFile;
  downloadLink.target = '_blank';
  downloadLink.click();
}

I18n._readData = function () {
  var result = {};
  var files = DataManager._databaseFile;
  this._readActors(result);
  this._readClasses(result);
  this._readSkills(result);
  this._readItems(result);
  this._readWeapons(result);
  this._readArmors(result);
  this._readEnemies(result);
  this._readTroops(result);
  this._readStates(result);
  this._readTilesets(result);
  this._readCommonEvents(result);
  this._readSystem(result);
  this._readTypes(result);
  this._readTerms(result);
  return result;
}

I18n._readActors = function (result) {
  result['actors'] = {};
  $dataActors.forEach(function (i) {
    if (i) {
      result['actors'][i.id] = {
        name: i.name,
        nickname: i.nickname,
        profile: i.profile,
        note: i.note
      };
    }
  });
}

I18n._readClasses = function (result) {
  result['classes'] = {};
  $dataClasses.forEach(function (i) {
    if (i) {
      result['classes'][i.id] = { name: i.name, note: i.note };
    }
  });
}

I18n._readSkills = function (result) {
  result['skills'] = {};
  $dataSkills.forEach(function (i) {
    if (i) {
      result['skills'][i.id] = {
        name: i.name,
        description: i.description,
        note: i.note,
        message1: i.message1,
        message2: i.message2
      };
    }
  });
}

I18n._readItems = function (result) {
  result['items'] = {};
  $dataItems.forEach(function (i) {
    if (i) {
      result['items'][i.id] = {
        name: i.name,
        description: i.description,
        note: i.note
      };
    }
  });
}

I18n._readWeapons = function (result) {
  result['weapons'] = {};
  $dataWeapons.forEach(function (i) {
    if (i) {
      result['weapons'][i.id] = {
        name: i.name,
        description: i.description,
        note: i.note
      };
    }
  });
}

I18n._readArmors = function (result) {
  result['armors'] = {};
  $dataArmors.forEach(function (i) {
    if (i) {
      result['armors'][i.id] = {
        name: i.name,
        description: i.description,
        note: i.note
      };
    }
  });
}

I18n._readEnemies = function (result) {
  result['enemies'] = {};
  $dataEnemies.forEach(function (i) {
    if (i) {
      result['enemies'][i.id] = {
        name: i.name,
        note: i.note
      };
    }
  });
}

I18n._readTroops = function (result) {
  var troops = {};
  $dataTroops.forEach(function (i) {
    if (i) {
      var pages = I18n._readAllEventPages(i.pages);
      if (pages.length > 0) {
        troops[i.id] = pages;
      }
    }
  });
  if (Object.keys(troops).length > 0) {
    result['troops'] = troops;
  }
}

I18n._readStates = function (result) {
  result['states'] = {};
  $dataStates.forEach(function (i) {
    if (i) {
      result['states'][i.id] = {
        name: i.name,
        note: i.note,
        message1: i.message1,
        message2: i.message2,
        message3: i.message3,
        message4: i.message4
      };
    }
  });
}

I18n._readTilesets = function (result) {
  result['tilesets'] = {};
  $dataTilesets.forEach(function (i) {
    if (i) {
      result['tilesets'][i.id] = {
        note: i.note
      };
    }
  });
}

I18n._readCommonEvents = function (result) {
  commonEvents = {};
  $dataCommonEvents.forEach(function (i) {
    if (i) {
      process =  I18n._readEventPage(i.list);
      if (process.length > 0) {
        commonEvents[i.id] = process;
      }
    }
  });
  if (Object.keys(commonEvents).length > 0) {
    result['commonEvents'] = commonEvents;
  }
}

I18n._readAllEventPages = function (pages) {
  var result = [];
  pages.forEach(function (i, index) {
    var process = I18n._readEventPage(i.list);
    console.log(i.list);
    if (process.length > 0) {
      result[index] = process;
    }
  });
  return result;
}

I18n._readEventPage = function (list) {
  var result = [];
  list.forEach(function (i, index) {
    switch (i.code) {
      case 401:
        result[index] = i.parameters;
        break;
      case 102:
        result[index] = i.parameters[0];
        break;
      case 402:
        result[index] = i.parameters[1];
        break;
      case 405:
        result[index] = i.parameters;
        break;
      case 320:
        result[index] = i.parameters[1];
        break;
      case 324:
        result[index] = i.parameters[1];
        break;
      case 325:
        result[index] = i.parameters[1];
        break;
      case 355:
        result[index] = i.parameters;
        break;
      case 356:
        result[index] = i.parameters;
        break;
      default:
        break;
    }
  });
  return result;
}

I18n._readSystem = function (result) {
  result['system'] = {
    currencyUnit: $dataSystem.currencyUnit,
    gameTitle: $dataSystem.gameTitle,
    locale: $dataSystem.locale
  };
}

I18n._readTypes = function (result) {
  result['types'] = {
    armorTypes: $dataSystem.armorTypes,
    elements: $dataSystem.elements,
    equipTypes: $dataSystem.equipTypes,
    weaponTypes: $dataSystem.weaponTypes,
    skillTypes: $dataSystem.skillTypes
  };
}

I18n._readTerms = function (result) {
  result['terms'] = $dataSystem.terms;
}


I18n._formatData = function (data) {
  return this._makeData(0, data);
}

I18n._makeData = function (indent, data) {
  if (typeof data == 'string') {
    return this._makeStringData(indent, data);
  }
  return this._makeObjectData(indent, data);
}

I18n._makeStringData = function (indent, data) {
  var arr = data.split('\n');
  if (arr.length == 1) {
    return '"' + data.replace(/"/g, '&quote;') + '"';
  }
  var s = this._makeIndent(indent);
  var val = arr.map(function (i) {
    if (i.charAt(0) == ' ') {
      i = i.replace(' ', '&space;');
    }
    if (i.charAt(0) == '\t') {
      i = i.replace('\t', '&tab;');
    }
    return s + i;
  }).join('\n');
  return '\n' + val;
}

I18n._makeObjectData = function (indent, data) {
  if (!data || Object.keys(data).length == 0) {
    return '""';
  }
  var s = this._makeIndent(indent);
  var lines = [];
  for (var p in data) {
      if (typeof data[p] !== 'function') {
        var sd = this._makeData(indent + 1, data[p]);
        lines.push( '\n' + s + '"' + p.replace(/"/g, '&quote;')  + '":' + sd);
      }
  }
  return lines.join('');
}

I18n._makeIndent = function (indent) {
  var result = '';
  for (var i = 0; i < indent; ++i) {
    result += '  ';
  }
  return result;
}
